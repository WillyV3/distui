package detection

import (
	"os"
	"path/filepath"
	"testing"
)

func TestDetectProjectMode(t *testing.T) {
	// Create temp directory for tests
	tmpDir := t.TempDir()

	tests := []struct {
		name              string
		setup             func(string) error
		expectedCustom    bool
		expectedNeedsSetup bool
	}{
		{
			name: "fresh_project_no_files",
			setup: func(dir string) error {
				return nil // No files
			},
			expectedCustom:    false,
			expectedNeedsSetup: true,
		},
		{
			name: "custom_goreleaser_yaml",
			setup: func(dir string) error {
				// Create custom .goreleaser.yaml WITHOUT marker
				content := `project_name: test
builds:
  - main: ./main.go
`
				return os.WriteFile(filepath.Join(dir, ".goreleaser.yaml"), []byte(content), 0644)
			},
			expectedCustom:    true,
			expectedNeedsSetup: true,
		},
		{
			name: "distui_generated_goreleaser",
			setup: func(dir string) error {
				// Create distui-generated .goreleaser.yaml WITH marker
				content := `# Generated by distui
project_name: test
builds:
  - main: ./main.go
`
				return os.WriteFile(filepath.Join(dir, ".goreleaser.yaml"), []byte(content), 0644)
			},
			expectedCustom:    false,
			expectedNeedsSetup: false,
		},
		{
			name: "custom_package_json",
			setup: func(dir string) error {
				// Create custom package.json WITHOUT marker
				content := `{
  "name": "test-package",
  "version": "1.0.0"
}
`
				return os.WriteFile(filepath.Join(dir, "package.json"), []byte(content), 0644)
			},
			expectedCustom:    true,
			expectedNeedsSetup: true,
		},
		{
			name: "distui_generated_package_json",
			setup: func(dir string) error {
				// Create distui-generated package.json WITH marker
				content := `{
  "_comment": "Generated by distui",
  "name": "test-package",
  "version": "1.0.0"
}
`
				return os.WriteFile(filepath.Join(dir, "package.json"), []byte(content), 0644)
			},
			expectedCustom:    false,
			expectedNeedsSetup: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			testDir := filepath.Join(tmpDir, tt.name)
			if err := os.MkdirAll(testDir, 0755); err != nil {
				t.Fatalf("Failed to create test dir: %v", err)
			}

			if err := tt.setup(testDir); err != nil {
				t.Fatalf("Setup failed: %v", err)
			}

			custom, needsSetup, err := DetectProjectMode(testDir)
			if err != nil {
				t.Fatalf("DetectProjectMode failed: %v", err)
			}

			if custom != tt.expectedCustom {
				t.Errorf("Expected custom=%v, got %v", tt.expectedCustom, custom)
			}

			if needsSetup != tt.expectedNeedsSetup {
				t.Errorf("Expected needsSetup=%v, got %v", tt.expectedNeedsSetup, needsSetup)
			}
		})
	}
}
